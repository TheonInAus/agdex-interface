"use client"

import React, { useCallback, useEffect, useState } from "react"
import Link from "next/link"
import { Loader } from "lucide-react"

import { siteConfig } from "@/config/site"
import { useOpenLiquidityPosition } from "@/hooks/actionLiquidityPosition"
import { useUserUsdxBalance } from "@/hooks/cUserState"
import { useAllLiquidityPools } from "@/hooks/liquidityPoolInfo"
import { Button, buttonVariants } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import { CustomTooltip } from "@/components/ui/customToolTip"
import { InputBox } from "@/components/ui/inputBox"
import { ListItem } from "@/components/ui/listItem"
import { Slider } from "@/components/ui/slider"
import { Stats } from "@/components/ui/stats"

import { PoolDataType, PoolRow } from "./PoolRow"

export default function PoolsPage() {
  const [leverageNumber, setLeverageNumber] = useState(1)
  const [expandedPool, setExpandedPool] = useState(0)
  const [usdMargin, setUsdMargin] = useState("")
  const [usdAfterMargin, setUsdAfterMargin] = useState("")
  const [isChecked, setIsChecked] = useState(true)
  const [showSlider, setShowSlider] = useState(true)
  //0 is for input Margin => afterMargin will change
  //1 is for input afterMaring => margin will change
  //2 is for change expanded pool => everything will be reset
  const [dataChangeMode, setDataChangeMode] = useState(0)
  const {
    data: balanceData,
    isError: isBalanceError,
    isLoading: isBalanceLoading,
  } = useUserUsdxBalance()

  const { poolsConfig } = useAllLiquidityPools()
  const currentPool = useCallback(() => {
    return poolsConfig.filter((item) => item.index === expandedPool)
  }, [expandedPool, poolsConfig])

  const handleSliderValueChange = (value: any) => {
    setLeverageNumber(value)
  }

  const handleCheckboxChange = (checked: any) => {
    setIsChecked(checked)
    // Now, use the isChecked state to control the visibility of the Slider
    setShowSlider(checked) // Assuming setShowSlider is defined elsewhere
  }

  useEffect(() => {
    if (dataChangeMode === 0 && usdMargin !== "") {
      const tempMargin = parseFloat(usdMargin)
      const newUsdAfterMargin = (
        isNaN(tempMargin) ? 0 : tempMargin * leverageNumber
      ).toString()
      if (usdAfterMargin !== newUsdAfterMargin) {
        setUsdAfterMargin(newUsdAfterMargin)
      }
    } else if (dataChangeMode === 1 && usdAfterMargin !== "") {
      const tempMargin = parseFloat(usdAfterMargin)
      const newUsdMargin = (
        isNaN(tempMargin) ? 0 : tempMargin / leverageNumber
      ).toString()
      if (usdMargin !== newUsdMargin) {
        setUsdMargin(newUsdMargin)
      }
    } else if (dataChangeMode === 2) {
      setUsdMargin("")
      setUsdAfterMargin("")
      setLeverageNumber(1)
    }
  }, [leverageNumber, usdMargin, usdAfterMargin, dataChangeMode])

  const toggleExpansion = (index: any) => {
    console.log("check toglle expansion => ", index)
    setDataChangeMode(2)
    setExpandedPool(index)
  }

  const { openLiqPositionData, openLiqPositionLoading, openLiqPositionWrite } =
    useOpenLiquidityPosition(
      poolsConfig[0].poolAddress,
      usdMargin,
      usdAfterMargin
    )

  const handlOpenLiqTemp = () => {
    openLiqPositionWrite()
  }

  return (
    <section className="container flex items-center justify-center gap-6 pt-6 pb-8">
      <div className="flex flex-row gap-4">
        <div
          className="p-6 mb-6 rounded-lg bg-0xboxBackground"
          style={{ width: 950, height: 750 }}
        >
          <div className="flex flex-row p-5 text-sm rounded-lg text-0xgrey">
            <div className="w-[15%]">Pool</div>
            <CustomTooltip
              triggerContent={<div className="w-[16%]">Max APR</div>}
            >
              <p className="mb-2">
                Max APR is calculated based on LPs' trading fee income in the
                past 24 hours, 0XX daily emission, and the maximum leverage of
                the pool.
              </p>
              <p className="mb-2">Max APR = Trading Fee Max APR + 0XX Max APR</p>
            </CustomTooltip>
            <div className="w-[20%]">24h Volume (USDT)</div>
            <CustomTooltip
              triggerContent={<div className="w-[15%]">24h Fees</div>}
            >
              <p className="mb-2">
                Total trading fee generated by the trading users within 24 hours
                of the market.
              </p>
            </CustomTooltip>
            <div className="w-[20%]">Liquidity</div>
            <div>My Liquidity</div>
          </div>
          <div className="flex flex-col rounded-lg">
            {poolsConfig?.map((pool, index) => (
              <PoolRow
                key={index}
                pool={pool}
                expandIndex={expandedPool}
                onToggle={() => toggleExpansion(index)}
              />
            ))}
          </div>
        </div>
        <div className="flex flex-col">
          <div
            className="p-6 mb-6 rounded-lg bg-0xboxBackground"
            style={{ width: 350, height: 550 }}
          >
            <div>{`Add ${currentPool.name}/USDT Liquidity`}</div>
            <br></br>
            <div className="w-full">
              <InputBox
                title="Margin"
                value={usdMargin}
                suffix="USDT"
                balanceNode={
                  isBalanceLoading ? (
                    <div>Fetching balanceâ€¦</div>
                  ) : isBalanceError ? (
                    <div>Error fetching balance</div>
                  ) : (
                    <div>
                      Balance: {balanceData?.formatted} {balanceData?.symbol}
                    </div>
                  )
                }
                onValueChange={(e) => {
                  setDataChangeMode(0)
                  setUsdMargin(e.target.value)
                }}
              />
              <br></br>
              <InputBox
                title="Liquidity"
                value={usdAfterMargin}
                suffix="USDT"
                prefix={`Leverage:`}
                prefixValue={leverageNumber}
                onPrefixChange={(e) => {
                  const intValue = parseInt(e.target.value, 10)
                  if (!isNaN(intValue)) {
                    setLeverageNumber(intValue)
                  } else if (intValue < 1) {
                    setLeverageNumber(1)
                  } else if (intValue > 200) {
                    setLeverageNumber(200)
                  } else {
                    setLeverageNumber(1)
                  }
                }}
                onValueChange={(e) => {
                  setDataChangeMode(1)
                  setUsdAfterMargin(e.target.value)
                }}
              />
              <br></br>
              <div>
                <div
                  className="flex flex-row items-center justify-between"
                  style={{ marginBottom: 10 }}
                >
                  <div className="text-sm">Leverage Slider</div>
                  <Checkbox
                    checked={isChecked}
                    onCheckedChange={handleCheckboxChange}
                  />
                </div>
                {showSlider && (
                  <Slider
                    defaultValue={[1]}
                    onValueChange={handleSliderValueChange}
                    max={200}
                    min={1}
                    step={1}
                    value={[leverageNumber]}
                    style={{ marginBottom: 10, marginTop: 10 }}
                  />
                )}
              </div>
              <br></br>
              <ListItem keyText="Liquidity" value={""} />
              <ListItem keyText="Margin" value={""} />
              <ListItem keyText="Margin Ratio" value={""} />
              <ListItem keyText="Execution Fee" value={""} />
            </div>
            <Button
              disabled={openLiqPositionLoading}
              className="w-full font-bold text-center rounded-md item-center bg-0xgreen h-9 hover:bg-0xgreen-foreground"
              style={{ marginTop: 20, color: "#000000" }}
              onClick={handlOpenLiqTemp}
            >
              {openLiqPositionLoading ? (
                <>
                  <Loader className="w-4 h-4 mr-2 animate-spin" />
                  Please wait
                </>
              ) : (Number(balanceData?.formatted) || 0) < Number(usdMargin) ? (
                "Insiffuient Balance"
              ) : (
                "Add"
              )}
            </Button>
          </div>
          <div className="p-6 rounded-lg bg-0xboxBackground">
            <div className="w-full">
              <div className="text-base">About Token/Asset Pool</div>
              <div className="my-3 border-t border-0xline"></div>
              <ListItem keyText="Max Leverage" value={"200x"} />
              <div className="flex justify-between">
                <CustomTooltip
                  triggerContent={
                    <div className="text-0xgrey text-xs">Average Leverage</div>
                  }
                >
                  <p className="mb-2">
                    Due to the maximum leverage being adjusted from 200x to 50x
                    on November 14, 2023, the Max APR figure may be lower than
                    the Avg. APR.
                  </p>
                </CustomTooltip>
                <div className="text-white text-xs">7.71x</div>
              </div>
              <ListItem keyText="Balance Rate" value={"26,601,123.63"} />
              <div className="flex justify-between">
                <CustomTooltip
                  triggerContent={
                    <div className="text-0xgrey text-xs">Risk Buffer Fund</div>
                  }
                >
                  <p className="mb-2">
                    The Risk Buffer Fund will bear all of the temporary losses
                    first before impacting Liquidity Providers (LPs). If its
                    balance becomes negative, this indicates that the LPs are
                    facing temporary losses.
                  </p>
                </CustomTooltip>
                <CustomTooltip
                  triggerContent={
                    <div className="text-white text-xs">-0.08%</div>
                  }
                >
                  <ListItem keyText="Realized PnL" value={"-93,922.98 USDT"} />
                  <ListItem keyText="Unrealized PnL" value={"-468.07 USDT"} />
                  <ListItem
                    keyText="Total Contribution"
                    value={"1,252,191.80 USDT"}
                  />
                </CustomTooltip>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
